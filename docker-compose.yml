version: "3.7"

networks:
  spring-messenger-net:
    name: spring-messenger-net
    driver: bridge

services:
  avatar_db_service:
    image: mongo:latest
    environment:
      - MONGO_DB=spring_messenger
    restart: always
    ports:
      - "27018:27017"
    volumes:
      - avatar_db:/data/db
    networks:
      - spring-messenger-net

  chats_db_service:
    image: postgres:latest
    environment:
      - POSTGRES_DB=chats_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=sa
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - chats_db:/var/lib/postgresql/data
    networks:
      - spring-messenger-net

  user_db_service:
    image: postgres:latest
    environment:
      - POSTGRES_DB=user_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=sa
    restart: always
    ports:
      - "5434:5432"
    volumes:
      - user_db:/var/lib/postgresql/data
    networks:
      - spring-messenger-net

  zookeeper_my_app:
    image: bitnami/zookeeper:3.8.0
    container_name: zookeeper_my_app
    restart: always
    networks:
      - spring-messenger-net
    ports:
      - "2182:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes

  kafka_my_app:
    image: bitnami/kafka:3.3.1
    container_name: kafka_my_app
    restart: always
    networks:
      - spring-messenger-net
    ports:
      - "9093:9093"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29093,DOCKER_EXTERNAL://:9093
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka_my_app:29093,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper_my_app:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: yes
    depends_on:
      - zookeeper_my_app

  kafdrop_my_app:
    image: obsidiandynamics/kafdrop:3.30.0
    container_name: kafdrop_my_app
    restart: always
    networks:
      - spring-messenger-net
    ports:
      - "9001:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka_my_app:29093"
    depends_on:
      - "kafka_my_app"

  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
    image: config-service:latest
    container_name: config-service-app
    ports:
      - "8888:8888"
    environment:
      BASEDIR: file:///home/igor/config-repo
    restart: always
    networks:
      - spring-messenger-net

  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    image: discovery-service:latest
    container_name: discovery-service-app
    ports:
      - "8761:8761"
    environment:
      CONFIG_SERVICE_URL: http://config-service:8888
      EUREKA_URL: http://discovery-service:8761/eureka
    restart: always
    networks:
      - spring-messenger-net
    depends_on:
      - config-service

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    image: gateway-service:latest
    container_name: gateway-service-app
    ports:
      - "8765:8765"
    environment:
      EUREKA_URL: http://discovery-service:8761/eureka
      CONFIG_SERVICE_URL: http://config-service:8888
      USER_SERVICE_URL: http://gateway-service:8765
    restart: always
    networks:
      - spring-messenger-net
    depends_on:
      - config-service
      - discovery-service

#  avatar-service:
#    build:
#      context: ./avatar-service
#      dockerfile: Dockerfile
#    image: avatar-service:latest
#    container_name: avatar-service-app
#    ports:
#      - "8085:8085"
#    environment:
#      MONGO_DB_HOST: avatar_db_service
#      MONGO_DB_PORT: 27017
#      EUREKA_URL: http://discovery-service:8761/eureka
#      CONFIG_SERVICE_URL: http://config-service:8888
#    restart: always
#    networks:
#      - spring-messenger-net
#    depends_on:
#      - config-service
#      - avatar_db_service
#      - discovery-service

#  chat-service:
#    build:
#      context: ./chat-service
#      dockerfile: Dockerfile
#    image: chat-service:latest
#    container_name: chat-service-app
#    ports:
#      - "8083:8083"
#    environment:
#      KAFKA_URL: "kafka_my_app:29093"
#      POSTGRES_DB_HOST: chats_db_service
#      POSTGRES_DB_PORT: 5432
#      POSTGRES_DB_USERNAME: postgres
#      POSTGRES_DB_PASSWORD: sa
#      EUREKA_URL: http://discovery-service:8761/eureka
#      CONFIG_SERVICE_URL: http://config-service:8888
#    restart: always
#    networks:
#      - spring-messenger-net
#    depends_on:
#      - config-service
#      - chats_db_service
#      - discovery-service
#
#  message-sender-service:
#    build:
#      context: ./message-sender-service
#      dockerfile: Dockerfile
#    image: message-sender-service:latest
#    container_name: message-sender-service-app
#    ports:
#      - "8084:8084"
#    environment:
#      KAFKA_URL: "kafka_my_app:29093"
#      EUREKA_URL: http://discovery-service:8761/eureka
#      CONFIG_SERVICE_URL: http://config-service:8888
#    restart: always
#    networks:
#      - spring-messenger-net
#    depends_on:
#      - config-service
#      - discovery-service

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    image: user-service:latest
    container_name: user-service-service-app
    ports:
      - "8082:8082"
    environment:
      POSTGRES_DB_HOST: user_db_service
      POSTGRES_DB_PORT: 5432
      POSTGRES_DB_USERNAME: postgres
      POSTGRES_DB_PASSWORD: sa
      EUREKA_URL: http://discovery-service:8761/eureka
      CONFIG_SERVICE_URL: http://config-service:8888
    restart: always
    networks:
      - spring-messenger-net
    depends_on:
      - config-service
      - user_db_service
      - discovery-service

volumes:
  avatar_db:
  chats_db:
  user_db:

